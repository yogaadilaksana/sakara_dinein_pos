// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       BigInt @id @default(autoincrement())
  name     String @db.VarChar(255)
  email    String @unique
  password String
  role     Role   @default(CASHIER)

  Refund Refund[]
}

enum Role {
  ADMIN
  CASHIER
  SUPER_ADMIN
  SUPER_ADMIN
}

model Product {
  id          BigInt  @id @default(autoincrement())
  name        String  @db.VarChar(255)
  description String  @db.Text
  image       String?
  category_id BigInt
  price       Decimal
  stock       BigInt  @default(0)

  refund_detail  Refund_Detail[]
  category       Category         @relation(fields: [category_id], references: [id])
  OrderItem      OrderItem[]
  Receipt_Detail Receipt_Detail[]
  extras         extras[]
}

model Order {
  id           BigInt   @id @default(autoincrement())
  table_number BigInt
  total        Decimal
  order_date   DateTime @default(now())
  status       String

  OrderItem OrderItem[]
}

model OrderItem {
  id         BigInt  @id @default(autoincrement())
  order_id   BigInt
  product_id BigInt
  price      Decimal
  quantity   BigInt
  subtotal   Decimal
  order_date  DateTime @default(now())

  product Product @relation(fields: [product_id], references: [id])
  order   Order   @relation(fields: [order_id], references: [id])
}

model Category {
  id   BigInt @id @default(autoincrement())
  name String @db.VarChar(255)

  product Product[]
}

model Shift {
  id             BigInt   @id @default(autoincrement())
  user_id        BigInt   
  start_time     DateTime @default(now())
  end_time       DateTime?
  start_cash     Decimal  @default(0.0)
  total_expected Decimal
  total_actual   Decimal

}

model Receipt {
  id             String   @id @default(uuid())
  total          Decimal
  diskon         Decimal
  pajak          Decimal
  date_time      DateTime @default(now())
  payment_id     String
  payment_status String

  refund         Refund[]
  payment        Payment          @relation(fields: [payment_id], references: [id])
  Receipt_Detail Receipt_Detail[]
}

model Receipt_Detail {
  id         BigInt  @id @default(autoincrement())
  receipt_id String
  product_id BigInt
  quantity   BigInt
  subtotal   Decimal

  receipt Receipt @relation(fields: [receipt_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])
}

model Payment {
  id           String             @id @default(uuid()) @db.VarChar(110)
  payment_name String
  snap_token   String?            @db.VarChar(255)
  status       transaction_status
  expiry       DateTime

  receipt Receipt[]
}

enum transaction_status {
  PENDING_PAYMENT
  PAID
  CANCELED
}

model Refund {
  id         String   @id @default(uuid())
  receipt_id String
  total      Decimal
  date_time  DateTime @default(now())
  status     String
  reason     String
  user_id    BigInt

  user          User            @relation(fields: [user_id], references: [id])
  refund_detail Refund_Detail[]
  receipt       Receipt         @relation(fields: [receipt_id], references: [id])
}

model Refund_Detail {
  id         BigInt  @id @default(autoincrement())
  refund_id  String
  product_id BigInt
  quantity   BigInt
  subtotal   Decimal
  refund_date  DateTime @default(now())

  product Product @relation(fields: [product_id], references: [id])
  refund  Refund  @relation(fields: [refund_id], references: [id])
}

model extras {
  id         BigInt  @id @default(autoincrement())
  product_id BigInt
  name       String  @db.VarChar(255)
  price      Decimal

  product Product @relation(fields: [product_id], references: [id])
}

enum TransactionType {
  INCOME
  EXPENSE
}
model Income_Expanses {
  id             Int      @id @default(autoincrement())
  type           TransactionType   // 'income' atau 'expense'
  amount         Float
  description    String?
  transactionDate DateTime @default(now())
}